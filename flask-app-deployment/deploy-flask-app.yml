---
# This playbook deploys a flask application in the site. 

- name: Deploy the flask app.
  hosts: webserver
  tasks:
  - name: Set proxy and safe directory for git if needed
    ansible.builtin.command:
      cmd: "{{ item }}" 
    loop:
      - git config --global http.proxy http://"{{ http_proxy }}"
      - git config --global https.proxy https://"{{ http_proxy }}"
      - git config --global --add safe.directory "{{ document_root }}"

    when: "inventory_name == 'test-inventory.yml'"

  - name: Check if the project directory exists
    ansible.builtin.stat:
      path: "{{ document_root }}/{{ app_module_import }}"
    register: project_dir

  - block:
    - name: Find all files and subdirectories in a specific directory
      ansible.builtin.find:
        paths: "{{ document_root }}"
        file_type: any
        hidden: true
      register: files_to_delete
      tags: rmdir

    - name: Empty the project directory
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ files_to_delete.files }}"
      tags: rmdir

    - name: Change the owner of the project directory
      ansible.builtin.file:
        path: "{{ document_root }}"
        state: directory
        owner: "{{ web_user }}"
        group: "{{ web_group }}"
        mode: 0755

    - name: Pull the lastest code from git server
      ansible.builtin.git:
        repo: "{{ git_repo }}"
        dest: "{{ document_root }}"

    - name: Create a virtual environment for the project
      ansible.builtin.command:
        cmd: /usr/bin/python3 -m venv "{{ document_root }}/.venv"
        creates: "{{ document_root }}/.venv"
    when: not project_dir.stat.exists



  - name: Install pip requirements
    ansible.builtin.pip:
      requirements: "{{ document_root }}/requirements.txt"
      executable: "{{ document_root }}/.venv/bin/pip"

  - name: Create a systemd service file of application for gunicorn
    ansible.builtin.template:
      src: gunicorn.service.j2
      dest: /etc/systemd/system/"{{ app_module_import }}".service
    notify: 
     - daemon-reload
     - restart gunicorn

- handlers:
  - name: daemon-reload
    ansible.builtin.systemd:
      daemon_reload: yes

  - name: restart gunicorn
    ansible.builtin.systemd:
      name: gunicorn
      state: restarted
      enabled: yes
